<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>idea方法注释模板</title>
      <link href="posts/3159180473/"/>
      <url>posts/3159180473/</url>
      
        <content type="html"><![CDATA[<p><font color="#ff0000">File–&gt;Settings–&gt;Editor–&gt;Live Templates</font><br><img src= "/img/loading.gif" data-lazy-src="https://tvax1.sinaimg.cn/large/00724TQEgy1gqdgvm388zj30yp0jzq54.jpg" alt="在这里插入图片描述"><br><font color="#ff0000">新建组名</font><br><img src= "/img/loading.gif" data-lazy-src="https://tvax3.sinaimg.cn/large/00724TQEgy1gqdgvyow1oj30ag041mx1.jpg" alt="在这里插入图片描述"><br><font color="#ff0000">设置模板内容</font><img src= "/img/loading.gif" data-lazy-src="https://tva3.sinaimg.cn/large/00724TQEgy1gqdgw6w0ccj30yp0jz76v.jpg" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* </span><br><span class="line">* TODO</span><br><span class="line">* </span><br><span class="line">* @param $param$</span><br><span class="line">* @<span class="built_in">return</span> $<span class="built_in">return</span>$</span><br><span class="line">* @author $USER$</span><br><span class="line">* @since $DATE$ $TIME$</span><br><span class="line">**/</span><br></pre></td></tr></table></figure><p><font color="#ff0000">设置模板的应用场景</font><br><img src= "/img/loading.gif" data-lazy-src="https://tvax3.sinaimg.cn/large/00724TQEgy1gqdgweg1ozj30yp0jzn0g.jpg" alt="在这里插入图片描述"><br><font color="#ff0000">设置参数的获取方式</font><br><img src= "/img/loading.gif" data-lazy-src="https://tva1.sinaimg.cn/large/00724TQEgy1gqdgwjre9dj307t053mx2.jpg" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://tva3.sinaimg.cn/large/00724TQEgy1gqdgwsqhnjj30fd07k3yy.jpg" alt="在这里插入图片描述"><br><font color="#ff0000">使用这种方法生成的注释参数类型为：</font><br><img src= "/img/loading.gif" data-lazy-src="https://tvax3.sinaimg.cn/large/00724TQEgy1gqdgx30jx3j307s057jrd.jpg" alt="在这里插入图片描述"><br><font color="#ff0000">如果想去除中括号，修改：</font><br><img src= "/img/loading.gif" data-lazy-src="https://tvax3.sinaimg.cn/large/00724TQEgy1gqdgx8ydusj30ff07m3yz.jpg" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">groovyScript(<span class="string">&quot;def result=&#x27;&#x27;; def params=\&quot;<span class="variable">$&#123;_1&#125;</span>\&quot;.replaceAll(&#x27;[\\\\[|\\\\]|\\\\s]&#x27;, &#x27;&#x27;).split(&#x27;,&#x27;).toList(); for(i = 0; i &lt; params.size(); i++) &#123;</span></span><br><span class="line"><span class="string">if(i!=params.size()-1) result+= params[i]+&#x27;,&#x27;;</span></span><br><span class="line"><span class="string">else&#123;result+= params[i];return result;&#125;</span></span><br><span class="line"><span class="string">&#125;; return result&quot;</span>, methodParameters())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA常用插件</title>
      <link href="posts/3162798155/"/>
      <url>posts/3162798155/</url>
      
        <content type="html"><![CDATA[<p>lombok<br>free mybatis plugin<br>codeGlance 迷你缩放图<br>Alibaba Java Coding Guidelines 阿里巴巴的编码规约检查插件<br>Alibaba Cloud Toolkit 快速部署到服务器<br>Json Parser json串格式化工具<br>RESTfultoolkit 根据url 查找controller 快捷键：Ctrl \ or Ctrl Alt N</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSR303数据校验</title>
      <link href="posts/293136133/"/>
      <url>posts/293136133/</url>
      
        <content type="html"><![CDATA[<h3 id="导入hibernate-validator包"><a href="#导入hibernate-validator包" class="headerlink" title="导入hibernate-validator包"></a><font color="#ff0000">导入hibernate-validator包</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.hibernate&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">5.2</span><span class="number">.2</span>.Final&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="普通校验"><a href="#普通校验" class="headerlink" title="普通校验"></a>普通校验</h1><h2 id="给Bean添加校验注解：javax-validation-constraints，并定义自己的message提示"><a href="#给Bean添加校验注解：javax-validation-constraints，并定义自己的message提示" class="headerlink" title="给Bean添加校验注解：javax.validation.constraints，并定义自己的message提示"></a>给Bean添加校验注解：<span class="has-inline-color has-vivid-red-color">javax.validation.constraints</span>，并定义自己的message提示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="meta">@NotBlank(message = &quot;品牌名必须提交&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><h2 id="在controller开启校验功能-Valid"><a href="#在controller开启校验功能-Valid" class="headerlink" title="在controller开启校验功能@Valid"></a>在controller开启校验功能@Valid</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">save</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> BrandEntity brand)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="给校验的bean后紧跟一个BindingResult，就可以获取到校验的结果"><a href="#给校验的bean后紧跟一个BindingResult，就可以获取到校验的结果" class="headerlink" title="给校验的bean后紧跟一个BindingResult，就可以获取到校验的结果"></a>给校验的bean后紧跟一个BindingResult，就可以获取到校验的结果</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">save</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> BrandEntity brand, BindingResult result)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">// 获取校验的错误结果</span></span><br><span class="line">result.getFieldErrors().forEach((item) -&gt; &#123;</span><br><span class="line"><span class="comment">// FieldError 获取到错误提示</span></span><br><span class="line">String message = item.getDefaultMessage();</span><br><span class="line"><span class="comment">// 获取错误的属性的名字</span></span><br><span class="line">String field = item.getField();</span><br><span class="line">map.put(field, message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> R.error(<span class="number">400</span>, <span class="string">&quot;提交的数据不合法&quot;</span>).put(<span class="string">&quot;data&quot;</span>, map);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">brandService.save(brand);</span><br><span class="line"><span class="keyword">return</span> R.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分组校验"><a href="#分组校验" class="headerlink" title="分组校验"></a>分组校验</h1><h2 id="创建分组校验接口"><a href="#创建分组校验接口" class="headerlink" title="创建分组校验接口"></a>创建分组校验接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AddGroup</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="给Bean添加校验注解，给校验注解标注什么情况需要进行校验"><a href="#给Bean添加校验注解，给校验注解标注什么情况需要进行校验" class="headerlink" title="给Bean添加校验注解，给校验注解标注什么情况需要进行校验"></a>给Bean添加校验注解，给校验注解标注什么情况需要进行校验</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="meta">@NotBlank(message = &quot;品牌名必须提交&quot;,groups = &#123;AddGroup.class&#125;)</span></span><br></pre></td></tr></table></figure><h2 id="controller中-Valid修改为-Validated，并标注注解根据哪种分组进行验证"><a href="#controller中-Valid修改为-Validated，并标注注解根据哪种分组进行验证" class="headerlink" title="controller中@Valid修改为@Validated，并标注注解根据哪种分组进行验证"></a>controller中@Valid修改为@Validated，并标注注解根据哪种分组进行验证</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">save</span><span class="params">(<span class="meta">@Validated(&#123;AddGroup.class&#125;)</span> <span class="meta">@RequestBody</span> BrandEntity brand)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><font color="#ff0000">注：默认没有指定分组的校验注解@NotBlank，在分组校验情况@Validated({AddGroup.class})下不生效，只会在@Validated生效；</font></p><h1 id="自定义校验"><a href="#自定义校验" class="headerlink" title="自定义校验"></a>自定义校验</h1><h2 id="编写一个自定义的校验注解"><a href="#编写一个自定义的校验注解" class="headerlink" title="编写一个自定义的校验注解"></a>编写一个自定义的校验注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ListValue &#123;</span><br><span class="line">　　<span class="comment">// 错误提示信息(需要在resorces下创建ValidationMessages.properties文件)</span></span><br><span class="line">　　<span class="comment">// 并在文件内添加　　包名.ListValue.message=错误提示内容</span></span><br><span class="line">　　<span class="comment">// 包名.ListValue.message　可随意定义，比如aaa(需和properties中的key对应)</span></span><br><span class="line"><span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> &quot;</span>&#123;包名.ListValue.message&#125;<span class="string">&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Class&lt;?&gt;[] groups() default &#123; &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Class&lt;? extends Payload&gt;[] payload() default &#123; &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">int[] vals() default &#123; &#125;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="编写一个自定义的校验器-ConstraintValidator"><a href="#编写一个自定义的校验器-ConstraintValidator" class="headerlink" title="编写一个自定义的校验器 ConstraintValidator"></a>编写一个自定义的校验器 ConstraintValidator</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListValueConstraintValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">ListValue</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="comment">// 初始化方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ListValue constraintAnnotation)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] vals = constraintAnnotation.vals();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> val : vals) &#123;</span><br><span class="line">set.add(val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value   需要校验的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="comment">// 判断是否校验成功</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(Integer value, ConstraintValidatorContext context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> set.contains(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关联自定义的校验器和自定义的校验注解"><a href="#关联自定义的校验器和自定义的校验注解" class="headerlink" title="关联自定义的校验器和自定义的校验注解"></a>关联自定义的校验器和自定义的校验注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在自定义注解上添加：</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">// 校验器可添加多个</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = &#123; ListValueConstraintValidator.class &#125;)</span></span><br><span class="line"><span class="meta">@Target(&#123; METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br></pre></td></tr></table></figure><h1 id="统一的异常处理-ControllerAdvice"><a href="#统一的异常处理-ControllerAdvice" class="headerlink" title="统一的异常处理@ControllerAdvice"></a>统一的异常处理@ControllerAdvice</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="comment">// @ResponseBody</span></span><br><span class="line"><span class="comment">// @ControllerAdvice(basePackages = &quot;需要异常处理的类或包&quot;)</span></span><br><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &quot;需要异常处理的类或包&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestExceptionControllerAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">handleVaildException</span><span class="params">(MethodArgumentNotValidException e)</span></span>&#123;</span><br><span class="line">log.error(<span class="string">&quot;数据校验出现问题&#123;&#125;，异常类型：&#123;&#125;&quot;</span>, e.getMessage(), e.getClass());</span><br><span class="line">BindingResult bindingResult = e.getBindingResult();</span><br><span class="line"></span><br><span class="line">Map&lt;String,String&gt; errorMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">// 校验错误信息：bindingResult.getFieldErrors()</span></span><br><span class="line">bindingResult.getFieldErrors().forEach((fieldError)-&gt;&#123;</span><br><span class="line">errorMap.put(fieldError.getField(),fieldError.getDefaultMessage());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> R.error(<span class="number">500</span>,<span class="string">&quot;参数格式校验失败&quot;</span>).put(<span class="string">&quot;data&quot;</span>,errorMap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExceptionHandler(value = Throwable.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">handleException</span><span class="params">(Throwable throwable)</span></span>&#123;</span><br><span class="line">log.error(<span class="string">&quot;错误：&quot;</span>,throwable);</span><br><span class="line"><span class="keyword">return</span> R.error(<span class="number">500</span>,<span class="string">&quot;未知异常&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常用的验证条件注解"><a href="#常用的验证条件注解" class="headerlink" title="常用的验证条件注解"></a>常用的验证条件注解</h1><h2 id="空检查"><a href="#空检查" class="headerlink" title="空检查"></a>空检查</h2><p>@Null 验证对象是否为null<br>@NotNull 验证对象是否不为null, 无法查检长度为0的字符串<br>@NotBlank 检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.<br>@NotEmpty 检查约束元素是否为NULL或者是EMPTY.</p><h2 id="Booelan检查"><a href="#Booelan检查" class="headerlink" title="Booelan检查"></a>Booelan检查</h2><p>@AssertTrue 验证 Boolean 对象是否为 true<br>@AssertFalse 验证 Boolean 对象是否为 false</p><h2 id="长度检查"><a href="#长度检查" class="headerlink" title="长度检查"></a>长度检查</h2><p>@Size(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内<br>@Length(min=, max=) Validates that the annotated string is between min and max included.</p><h2 id="日期检查"><a href="#日期检查" class="headerlink" title="日期检查"></a>日期检查</h2><p>@Past 验证 Date 和 Calendar 对象是否在当前时间之前，验证成立的话被注释的元素一定是一个过去的日期<br>@Future 验证 Date 和 Calendar 对象是否在当前时间之后 ，验证成立的话被注释的元素一定是一个将来的日期<br>@Pattern 验证 String 对象是否符合正则表达式的规则，被注释的元素符合制定的正则表达式，regexp:正则表达式 flags: 指定 Pattern.Flag 的数组，表示正则表达式的相关选项。</p><h2 id="数值检查"><a href="#数值检查" class="headerlink" title="数值检查"></a>数值检查</h2><p>建议使用在Stirng,Integer类型，不建议使用在int类型上，因为表单值为“”时无法转换为int，但可以转换为Stirng为”“,Integer为null<br>@Min 验证 Number 和 String 对象是否大等于指定的值<br>@Max 验证 Number 和 String 对象是否小等于指定的值<br>@DecimalMax 被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示.小数存在精度<br>@DecimalMin 被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示.小数存在精度<br>@Digits 验证 Number 和 String 的构成是否合法<br>@Digits(integer=,fraction=) 验证字符串是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。<br>@Range(min=, max=) 被指定的元素必须在合适的范围内<br>@Range(min=10000,max=50000,message=”range.bean.wage”)<br>@Valid 递归的对关联对象进行校验, 如果关联对象是个集合或者数组,那么对其中的元素进行递归校验,如果是一个map,则对其中的值部分进行校验.(是否进行递归验证)<br>@CreditCardNumber信用卡验证<br>@Email 验证是否是邮件地址，如果为null,不进行验证，算通过验证。 </p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux安装jdk1.8</title>
      <link href="posts/3542552830/"/>
      <url>posts/3542552830/</url>
      
        <content type="html"><![CDATA[<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入到local目录，创建java文件夹并把jdk解压到该目录下</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">shmily</span> ~]<span class="comment"># cd /usr/local</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">shmily</span> <span class="type">local</span>]<span class="comment"># mkdir java</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">shmily</span> <span class="type">local</span>]<span class="comment"># tar -zxvf jdk-8u161-linux-x64.tar.gz -C java</span></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">shmily</span> <span class="type">local</span>]<span class="comment"># vim /etc/profile</span></span><br><span class="line"><span class="comment"># 文件末尾添加内容：</span></span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/local/java/jdk1.<span class="number">8.0</span>_161</span><br><span class="line">export JRE_HOME=<span class="variable">$</span>&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:<span class="variable">$</span>&#123;JAVA_HOME&#125;/lib:<span class="variable">$</span>&#123;JRE_HOME&#125;/lib:<span class="variable">$CLASSPATH</span></span><br><span class="line">export JAVA_PATH=<span class="variable">$</span>&#123;JAVA_HOME&#125;/bin:<span class="variable">$</span>&#123;JRE_HOME&#125;/bin</span><br><span class="line">export PATH=<span class="variable">$PATH:</span><span class="variable">$</span>&#123;JAVA_PATH&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令使配置生效：</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">shmily</span> <span class="type">local</span>]<span class="comment"># source /etc/profile</span></span><br><span class="line"><span class="comment"># 查看jdk是否安装完成：</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">shmily</span> <span class="type">local</span>]<span class="comment"># java -version</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows下使用.msi进行node.js安装</title>
      <link href="posts/2673616333/"/>
      <url>posts/2673616333/</url>
      
        <content type="html"><![CDATA[<p>nodejs下载</p><p>Node.js 安装包及源码下载地址为：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a><br><img src= "/img/loading.gif" data-lazy-src="https://tvax4.sinaimg.cn/large/00724TQEgy1gqdf3weg4uj30rp0emmym.jpg" alt="在这里插入图片描述"><br>你可以根据不同平台系统选择你需要的 Node.js 安装包。<br>此文章介绍windows环境下的安装：</p><p>一直执行next到安装完成：<br><img src= "/img/loading.gif" data-lazy-src="https://tva4.sinaimg.cn/large/00724TQEgy1gqdf48sui8j30h60df74x.jpg" alt="在这里插入图片描述"></p><p>Node.js runtime 表示运行环境<br>npm package manager表示npm包管理器<br>online documentation shortcuts 在线文档快捷方式<br>Add to PATH添加到环境变量<br><img src= "/img/loading.gif" data-lazy-src="https://tva4.sinaimg.cn/large/00724TQEgy1gqdf4gyyeij30h60dfq3y.jpg" alt="在这里插入图片描述"><br>在键盘按下【win+R】键，输入cmd，然后回车，打开cmd窗口验证：<br>显示版本号代表安装完成：<br><img src= "/img/loading.gif" data-lazy-src="https://tvax3.sinaimg.cn/large/00724TQEgy1gqdf4o0vavj30r90efdg7.jpg" alt="在这里插入图片描述"><br>安装完成后在安装目录创建node_global及node_cache文件夹：<br><img src= "/img/loading.gif" data-lazy-src="https://tvax3.sinaimg.cn/large/00724TQEgy1gqdf4u0fz4j30si0fggne.jpg" alt="在这里插入图片描述"><br>创建完两个空文件夹之后，打开cmd命令窗口，输入：<br><code>npm config set prefix &quot;E:\nodejs\node_global&quot;</code><br><code>npm config set cache &quot;E:\nodejs\node_cache&quot;</code></p><p>设置环境变量：<br><em>进入环境变量对话框，在系统变量下新建NODE_PATH，输入E:\nodejs\node_global\node_modules，将用户变量下Path中的C:\Users\XXX\AppData\Roaming\npm修改为E:\nodejs\node_global</em></p><p>安装模块进行测试：<br><code>npm install express -g     # -g意思为全局安装</code></p><p><font color=#FF0000>报错：npm install rollbackFailedOptional: verb npm-session</font><br>cmd执行<code>npm config set registry http://registry.npm.taobao.org</code>命令；</p><p>安装全局vue-cli脚手架：<br>cmd执行：<br><code>cnpm install -g vue-cli  #  等待安装</code><br><code>vue   #  若出现vue信息说明表示成功</code></p><p><font color=#FF0000>cnpm不是内部命令的解决办法：</font></p><p>系统变量中的path里加：E:\nodejs\node_global<br>然后退出重新打开cmd，输入<code>cnpm -v</code></p><p><font color=#FF0000>cnpm : 无法加载文件 E:\nodejs\node_global\cnpm.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies 解决方法：</font><br>以管理员身份运行windows powershell，运行命令set-ExecutionPolicy RemoteSigned</p><p>至此，node.js安装完成。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
